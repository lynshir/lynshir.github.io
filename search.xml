<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>HTML理论</title>
      <link href="/2018/08/01/HTML/HTML_interview/index/"/>
      <url>/2018/08/01/HTML/HTML_interview/index/</url>
      <content type="html"><![CDATA[<h3 id="1-http和https"><a href="#1-http和https" class="headerlink" title="1.http和https"></a><strong>1.http和https</strong></h3><p>  <strong>（1）http和https的基本概念</strong></p><pre><code>http: 超文本传输协议，是互联网上应用最为广泛的一种网络协议，      是一个客户端和服务器端请求和应答的标准（TCP），      用于从WWW服务器传输超文本到本地浏览器的传输协议，      它可以使浏览器更加高效，使网络传输减少。</code></pre><a id="more"></a><pre><code>https: 是以安全为目标的HTTP通道，简单讲是HTTP的安全版，       即HTTP下加入SSL层，               HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。https协议的主要作用是：建立一个信息安全通道，来确保数据的传输，确保网站的真实性。</code></pre><p><code>https的SSL加密是在传输层实现的。</code></p><p> <strong>（2）http和https的区别？</strong></p><p>http传输的数据都是未加密的，也就是明文的，网景公司设置了SSL协议来对http协议传输的数据进行加密处理，简单来说https协议是由http和ssl协议构建的可进行加密传输和身份认证的网络协议，比http协议的安全性更高。</p><p>主要的区别如下：</p><ul><li>Https协议需要ca证书，费用较高。</li><li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li><li>使用不同的链接方式，端口也不同，一般而言，http协议的端口为80，https的端口为443</li><li><p>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><p><strong>(3)https协议的工作原理？</strong></p></li></ul><p>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤，如图所示。</p><ul><li>客户使用https url访问服务器，则要求web 服务器建立ssl链接。</li><li>web服务器接收到客户端的请求之后，会将网站的证书（证书中包含了公钥），返回或者说传输给客户端。</li><li>客户端和web服务器端开始协商SSL链接的安全等级，也就是加密等级。</li><li>客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥来加密会话密钥，并传送给网站。</li><li>web服务器通过自己的私钥解密出会话密钥。</li><li><p>web服务器通过会话密钥加密与客户端之间的通信。</p><p><strong>(4)https协议的优点？</strong></p></li><li><p>使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p></li><li>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</li><li>HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</li><li><p>谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p><p><strong>(5)https协议的缺点</strong></p></li><li><p>https握手阶段比较费时，会使页面加载时间延长50%，增加10%~20%的耗电。</p></li><li>https缓存不如http高效，会增加数据开销。</li><li>SSL证书也需要钱，功能越强大的证书费用越高。</li><li>SSL证书需要绑定IP，不能再同一个ip上绑定多个域名，ipv4资源支持不了这种消耗。</li></ul><h3 id="2-tcp三次握手，一句话概括"><a href="#2-tcp三次握手，一句话概括" class="headerlink" title="2.tcp三次握手，一句话概括"></a><strong>2.tcp三次握手，一句话概括</strong></h3><p><code>客户端和服务端都需要知道各自可收发，因此需要三次握手。</code><br>三次握手四次挥手示意图：<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1532576516&amp;di=e3c2138bf2fe9006fda6dd356a34348c&amp;imgtype=jpg&amp;er=1&amp;src=http://image.bubuko.com/info/201807/20180707121851395531.png" alt="三次握手"><br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1531981881380&amp;di=eb71a66151f066db26570b0485a35f36&amp;imgtype=jpg&amp;src=http://img2.imgtn.bdimg.com/it/u=2557304727,3565059612&amp;fm=214&amp;gp=0.jpg" alt="四次挥手"></p><p>  从图片可以得到三次握手可以简化为：C发起请求连接S确认，也发起连接C确认我们再看看每次握手的作用：</p><ul><li>第一次握手：S只可以确认自己可以接受C发送的报文段</li><li>第二次握手：C可以确认S收到了自己发送的报文段，并且可以确认 自己可以接受S发送的报文段</li><li>第三次握手：S可以确认C收到了自己发送的报文段</li></ul><h3 id="3-TCP和UDP的区别"><a href="#3-TCP和UDP的区别" class="headerlink" title="3.TCP和UDP的区别"></a><strong>3.TCP和UDP的区别</strong></h3><p>（1）TCP是面向连接的，udp是无连接的即发送数据前不需要先建立链接。</p><p>（2）TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。 并且因为tcp可靠，面向连接，不会丢失数据因此适合大数据量的交换。</p><p>（3）TCP是面向字节流，UDP面向报文，并且网络出现拥塞不会使得发送速率降低（因此会出现丢包，对实时的应用比如IP电话和视频会议等）。</p><p>（4）TCP只能是1对1的，UDP支持1对1,1对多。</p><p>（5）TCP的首部较大为20字节，而UDP只有8字节。</p><p>（6）TCP是面向连接的可靠性传输，而UDP是不可靠的。<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1531982312903&amp;di=99c5cb338e5b628339e28a5efbf9d36b&amp;imgtype=jpg&amp;src=http://img1.imgtn.bdimg.com/it/u=3833759016,2659346504&amp;fm=214&amp;gp=0.jpg" alt="此处输入图片的描述"></p><h3 id="4-WebSocket的实现和应用"><a href="#4-WebSocket的实现和应用" class="headerlink" title="4.WebSocket的实现和应用"></a><strong>4.WebSocket的实现和应用</strong></h3><p><strong>（1）什么是websocket</strong><br>WebSocket是HTML5中的协议，支持持久连续，http协议不支持持久性连接。Http1.0和HTTP1.1都不支持持久性的链接，HTTP1.1中的keep-alive，将多个http请求合并为1个</p><p><strong>（2）WebSocket是什么样的协议，具体有什么优点？</strong></p><ul><li><p>HTTP的生命周期通过Request来界定，也就是Request一个Response，那么在Http1.0协议中，这次Http请求就结束了。在Http1.1中进行了改进，是的有一个connection：Keep-alive，也就是说，在一个Http连接中，可以发送多个Request，接收多个Response。但是必须记住，在Http中一个Request只能对应有一个Response，而且这个Response是被动的，不能主动发起。</p></li><li><p>WebSocket是基于Http协议的，或者说借用了Http协议来完成一部分握手，在握手阶段与Http是相同的。我们来看一个websocket握手协议的实现，基本是2个属性，upgrade，connection。</p></li><li><p>基本请求如下：</p></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/chat</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: server.example.com</span><br><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Connection</span>: Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span>: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class="line"><span class="attribute">Sec-WebSocket-Protocol</span>: chat, superchat</span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span>: 13</span><br><span class="line"><span class="attribute">Origin</span>: http://example.com</span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Upgrade:</span>webSocket</span><br><span class="line"><span class="symbol">Connection:</span>Upgrade</span><br><span class="line">告诉服务器发送的是websocket</span><br><span class="line"><span class="keyword">Sec</span>-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class="line"><span class="keyword">Sec</span>-WebSocket-Protocol: chat, superchat</span><br><span class="line"><span class="keyword">Sec</span>-WebSocket-Version: <span class="number">13</span></span><br></pre></td></tr></table></figure><h3 id="5-HTTP请求的方式，HEAD方式括"><a href="#5-HTTP请求的方式，HEAD方式括" class="headerlink" title="5.HTTP请求的方式，HEAD方式括"></a><strong>5.HTTP请求的方式，HEAD方式括</strong></h3><ul><li>head：类似于get请求，只不过返回的响应中没有具体的内容，用户获取报头</li><li>options：允许客户端查看服务器的性能，比如说服务器支持的请求方式等等。</li></ul><h3 id="6-一个图片url访问后直接下载怎样实现？"><a href="#6-一个图片url访问后直接下载怎样实现？" class="headerlink" title="6.一个图片url访问后直接下载怎样实现？"></a><strong>6.一个图片url访问后直接下载怎样实现？</strong></h3><p>请求的返回头里面，用于浏览器解析的重要参数就是OSS的API文档里面的返回http头，决定用户下载行为的参数。</p><p>下载的情况下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> x-oss-<span class="keyword">object</span>-type:</span><br><span class="line">       Normal</span><br><span class="line"><span class="number">2.</span> x-oss-request-id:</span><br><span class="line">       <span class="number">598</span>D5ED34F29D01FE2925F41</span><br><span class="line"><span class="number">3.</span> x-oss-storage-<span class="class"><span class="keyword">class</span>:<span class="type"></span></span></span><br><span class="line">       Standard</span><br></pre></td></tr></table></figure></p><h3 id="7-web-Quality-（无障碍）？"><a href="#7-web-Quality-（无障碍）？" class="headerlink" title="7.web Quality （无障碍）？"></a><strong>7.web Quality （无障碍）？</strong></h3><p>能够被残障人士使用的网站才能称得上一个易用的（易访问的）网站。<br>残障人士指的是那些带有残疾或者身体不健康的用户。</p><p>使用alt属性：<code>&lt;img src=&quot;person.jpg&quot;  alt=&quot;this is a person&quot;/&gt;</code></p><p>有时候浏览器会无法显示图像。具体的原因有：</p><ul><li>用户关闭了图像显示</li><li>浏览器是不支持图形显示的迷你浏览器</li><li>浏览器是语音浏览器（供盲人和弱视人群使用）</li><li>如果您使用了alt属性，那么浏览器至少可以显示或读出有关图像的描述。</li></ul><h3 id="8-几个很实用的BOM属性对象方法？"><a href="#8-几个很实用的BOM属性对象方法？" class="headerlink" title="8.几个很实用的BOM属性对象方法？"></a><strong>8.几个很实用的BOM属性对象方法？</strong></h3><p>什么是Bom? Bom是浏览器对象模型。有哪些常用的Bom属性呢？</p><p><strong>(1)location对象</strong><br>location.href– 返回或设置当前文档的URL<br>location.search – 返回URL中的查询字符串部分。例如 <a href="http://www.dreamdu.com/dreamdu.php?id=5&amp;name=dreamdu" target="_blank" rel="noopener">http://www.dreamdu.com/dreamdu.php?id=5&amp;name=dreamdu</a> 返回包括(?)后面的内容?id=5&amp;name=dreamdu<br>location.hash – 返回URL#后面的内容，如果没有#，返回空<br>location.host – 返回URL中的域名部分，例如<a href="http://www.dreamdu.com" target="_blank" rel="noopener">www.dreamdu.com</a><br>location.hostname – 返回URL中的主域名部分，例如dreamdu.com<br>location.pathname – 返回URL的域名后的部分。例如 <a href="http://www.dreamdu.com/xhtml/" target="_blank" rel="noopener">http://www.dreamdu.com/xhtml/</a> 返回/xhtml/<br>location.port – 返回URL中的端口部分。例如 <a href="http://www.dreamdu.com:8080/xhtml/" target="_blank" rel="noopener">http://www.dreamdu.com:8080/xhtml/</a> 返回8080<br>location.protocol – 返回URL中的协议部分。例如 <a href="http://www.dreamdu.com:8080/xhtml/" target="_blank" rel="noopener">http://www.dreamdu.com:8080/xhtml/</a> 返回(//)前面的内容http:<br>location.assign – 设置当前文档的URL<br>location.replace() – 设置当前文档的URL，并且在history对象的地址列表中移除这个URL location.replace(url);<br>location.reload() – 重载当前页面</p><p><strong>(2)history对象</strong><br>history.go() – 前进或后退指定的页面数 history.go(num);<br>history.back() – 后退一页<br>history.forward() – 前进一页</p><p><strong>(3)Navigator对象</strong><br>navigator.userAgent – 返回用户代理头的字符串表示(就是包括浏览器版本信息等的字符串)<br>navigator.cookieEnabled – 返回浏览器是否支持(启用)cookie</p><h3 id="9-HTML5-drag-api"><a href="#9-HTML5-drag-api" class="headerlink" title="9.HTML5 drag api"></a><strong>9.HTML5 drag api</strong></h3><ul><li>dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发，。</li><li>darg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。</li><li>dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。</li><li>dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。</li><li>dragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。</li><li>drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。</li><li>dragend：事件主体是被拖放元素，在整个拖放操作结束时触发</li></ul><h3 id="10-http2-0"><a href="#10-http2-0" class="headerlink" title="10.http2.0"></a><strong>10.http2.0</strong></h3><p>首先补充一下，http和https的区别，相比于http,https是基于ssl加密的http协议<br>简要概括：http2.0是基于1999年发布的http1.0之后的首次更新。</p><ul><li>提升访问速度（可以对于，请求资源所需时间更少，访问速度更快，相比http1.0）</li><li>允许多路复用：多路复用允许同时通过单一的HTTP/2连接发送多重请求-响应信息。改善了：在http1.1中，浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制（连接数量），超过限制会被阻塞。</li><li>二进制分帧：HTTP2.0会将所有的传输信息分割为更小的信息或者帧，并对他们进行二进制编码</li><li>首部压缩</li><li>服务器端推送</li></ul><h3 id="11-补充400和401、403状态码"><a href="#11-补充400和401、403状态码" class="headerlink" title="11.补充400和401、403状态码"></a><strong>11.补充400和401、403状态码</strong></h3><p><strong>(1)400状态码：请求无效</strong><br>产生原因：</p><ul><li>前端提交数据的字段名称和字段类型与后台的实体没有保持一致</li><li><p>前端提交到后台的数据应该是json字符串类型，但是前端没有将对象JSON.stringify转化成字符串。<br>解决方法：</p></li><li><p>对照字段的名称，保持一致性</p></li><li>将obj对象通过JSON.stringify实现序列化</li></ul><p><strong>(2)401状态码：当前请求需要用户验证</strong><br><strong>(3)403状态码：服务器已经得到请求，但是拒绝执行</strong></p><h3 id="12-fetch发送2次请求的原因"><a href="#12-fetch发送2次请求的原因" class="headerlink" title="12.fetch发送2次请求的原因"></a><strong>12.fetch发送2次请求的原因</strong></h3><p><code>fetch发送post请求的时候，总是发送2次，第一次状态码是204，第二次才成功？</code></p><p>原因很简单，因为你用fetch的post请求的时候，导致fetch 第一次发送了一个Options请求，询问服务器是否支持修改的请求头，如果服务器支持，则在第二次中发送真正的请求。</p><h3 id="13-Cookie、sessionStorage、localStorage的区别"><a href="#13-Cookie、sessionStorage、localStorage的区别" class="headerlink" title="13.Cookie、sessionStorage、localStorage的区别"></a><strong>13.Cookie、sessionStorage、localStorage的区别</strong></h3><p>共同点：都是保存在浏览器端，并且是同源的</p><ul><li><p>Cookie：cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下,存储的大小很小只有4K左右。 （key：可以在浏览器和服务器端来回传递，存储容量小，只有大约4K左右）</p></li><li><p>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持，localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。（key：本身就是一个回话过程，关闭浏览器后消失，session为一个回话，当页面不同即使是同一页面打开两次，也被视为同一次回话）</p></li><li><p>localStorage：localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。（key：同源窗口都会共享，并且不会失效，不管窗口或者浏览器关闭与否都会始终生效）</p></li></ul><p>补充说明一下cookie的作用：</p><ul><li><p>保存用户登录状态。例如将用户id存储于一个cookie内，这样当用户下次访问该页面时就不需要重新登录了，现在很多论坛和社区都提供这样的功能。 cookie还可以设置过期时间，当超过时间期限后，cookie就会自动消失。因此，系统往往可以提示用户保持登录状态的时间：常见选项有一个月、三个 月、一年等。</p></li><li><p>跟踪用户行为。例如一个天气预报网站，能够根据用户选择的地区显示当地的天气情况。如果每次都需要选择所在地是烦琐的，当利用了 cookie后就会显得很人性化了，系统能够记住上一次访问的地区，当下次再打开该页面时，它就会自动显示上次用户所在地区的天气情况。因为一切都是在后 台完成，所以这样的页面就像为某个用户所定制的一样，使用起来非常方便</p></li><li><p>定制页面。如果网站提供了换肤或更换布局的功能，那么可以使用cookie来记录用户的选项，例如：背景色、分辨率等。当用户下次访问时，仍然可以保存上一次访问的界面风格。</p></li></ul><h3 id="14-web-worker"><a href="#14-web-worker" class="headerlink" title="14.web worker"></a><strong>14.web worker</strong></h3><p>在HTML页面中，如果在执行脚本时，页面的状态是不可相应的，直到脚本执行完成后，页面才变成可相应。web worker是运行在后台的js，独立于其他脚本，不会影响页面你的性能。并且通过postMessage将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。</p><p>如何创建web worker：</p><ul><li>检测浏览器对于web worker的支持性</li><li>创建web worker文件（js，回传函数等）</li><li>创建web worker对象</li></ul><h3 id="15-对HTML语义化标签的理解"><a href="#15-对HTML语义化标签的理解" class="headerlink" title="15.对HTML语义化标签的理解"></a><strong>15.对HTML语义化标签的理解</strong></h3><p>HTML5语义化标签是指正确的标签包含了正确的内容，结构良好，便于阅读，比如nav表示导航条，类似的还有article、header、footer等等标签。</p><h3 id="16-iframe是什么？有什么缺点？"><a href="#16-iframe是什么？有什么缺点？" class="headerlink" title="16.iframe是什么？有什么缺点？"></a><strong>16.iframe是什么？有什么缺点？</strong></h3><p>定义：iframe元素会创建包含另一个文档的内联框架<br>提示：可以将提示文字放在<code>&lt;iframe&gt;&lt;/iframe&gt;</code>之间，来提示某些不支持iframe的浏览器</p><p>缺点：</p><ul><li>会阻塞主页面的onload事件</li><li>搜索引擎无法解读这种页面，不利于SEO</li><li>iframe和主页面共享连接池，而浏览器对相同区域有限制所以会影响性能。</li></ul><h3 id="17-Doctype作用-严格模式与混杂模式如何区分？它们有何意义"><a href="#17-Doctype作用-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="17.Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?"></a><strong>17.Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</strong></h3><p>Doctype声明于文档最前面，告诉浏览器以何种方式来渲染页面，这里有两种模式，严格模式和混杂模式。</p><ul><li>严格模式的排版和 JS 运作模式是 以该浏览器支持的最高标准运行。</li><li>混杂模式，向后兼容，模拟老式浏览器，防止浏览器无法兼容页面。</li></ul><h3 id="18-Cookie如何防范XSS攻击"><a href="#18-Cookie如何防范XSS攻击" class="headerlink" title="18.Cookie如何防范XSS攻击"></a><strong>18.Cookie如何防范XSS攻击</strong></h3><p>XSS（跨站脚本攻击）是指攻击者在返回的HTML中嵌入javascript脚本，为了减轻这些攻击，需要在HTTP头部配上，set-cookie：</p><ul><li>httponly-这个属性可以防止XSS,它会禁止javascript脚本来访问cookie。</li><li>secure - 这个属性告诉浏览器仅在请求为https的时候发送cookie。<br>结果应该是这样的：Set-Cookie=…..</li></ul><p>使用CSP防止XSS攻击<a href="http://www.ruanyifeng.com/blog/2016/09/csp.html" target="_blank" rel="noopener">。阮一峰博客：Content Security Policy 入门教程</a></p><h3 id="19-Cookie和session的区别"><a href="#19-Cookie和session的区别" class="headerlink" title="19.Cookie和session的区别"></a><strong>19.Cookie和session的区别</strong></h3><p>HTTP是一个无状态协议，因此Cookie的最大的作用就是存储sessionId用来唯一标识用户</p><h3 id="20-一句话概括RESTFUL"><a href="#20-一句话概括RESTFUL" class="headerlink" title="20. 一句话概括RESTFUL"></a><strong>20. 一句话概括RESTFUL</strong></h3><p>就是用URL定位资源，用HTTP描述操作</p><h3 id="21-讲讲viewport和移动端布局"><a href="#21-讲讲viewport和移动端布局" class="headerlink" title="21.讲讲viewport和移动端布局"></a><strong>21.讲讲viewport和移动端布局</strong></h3><p><a href="https://github.com/forthealllight/blog/issues/13" target="_blank" rel="noopener">响应式布局的常用解决方案对比(媒体查询、百分比、rem和vw/vh）</a></p><h3 id="22-click在ios上有300ms延迟，原因及如何解决？"><a href="#22-click在ios上有300ms延迟，原因及如何解决？" class="headerlink" title="22.click在ios上有300ms延迟，原因及如何解决？"></a><strong>22.click在ios上有300ms延迟，原因及如何解决？</strong></h3><p><strong>(1)粗暴型，禁用缩放</strong></p><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no&quot;&gt; </code></pre><p><strong>(2)利用FastClick，其原理是：</strong></p><p>检测到touchend事件后，立刻出发模拟click事件，并且把浏览器300毫秒之后真正出发的事件给阻断掉</p>]]></content>
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML理论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS-面向对象</title>
      <link href="/2018/08/01/CSS/OOCSS/index/"/>
      <url>/2018/08/01/CSS/OOCSS/index/</url>
      <content type="html"><![CDATA[<h3 id="面向对象（Object-Orientend简称OO）的CSS的概念解读"><a href="#面向对象（Object-Orientend简称OO）的CSS的概念解读" class="headerlink" title="面向对象（Object Orientend简称OO）的CSS的概念解读"></a>面向对象（Object Orientend简称OO）的CSS的概念解读</h3><p> <code>众多开发者忽视了CSS的表现（认为他太过简单，是一种机械的工作），而把更多经历关注在Javascript的性能上或者其他方面。OO CSS将页面可重用元素抽象成一个类，用Class加以描述，而与其对应的HTML即可看成是此类的一个实例。</code></p><h3 id="OO-CSS的作用和注意事项"><a href="#OO-CSS的作用和注意事项" class="headerlink" title="OO CSS的作用和注意事项"></a>OO CSS的作用和注意事项</h3><a id="more"></a><p>作用：</p><ul><li>加强代码复用方便维护 <em> 减小CSS体积 </em> 提升渲染效率 * 组件库思想，栅格布局可共用，减少选择器，方便扩展</li></ul><p>注意事项：</p><ul><li>不要直接定义子节点，应把共性声明放到父类</li><li>结构和皮肤相分离。</li><li>容器和内容相分离。</li><li>抽象出可重用的元素，建好组件库，在组件库内寻找可用的元素组装页面。</li><li>往你想要扩展的对象本身增加class而不是他的父节点。</li><li>对象应保持独立性。</li><li>避免使用ID选择器，权重太高，无法重用。</li><li>避免位置相关的样式。</li><li>保证选择器相同的权重。</li><li>类名 简短 清晰 语义化 OOCSS的名字并不影响HTML语义化。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码示例： //不要直接定义子节点，应把共性声明放到父类</span><br><span class="line">.mod .inner&#123;……&#125;       //.mod 下面的inner 建议</span><br><span class="line">.inner&#123;……&#125;            //不是很建议的的声明</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码示例：//结构和皮肤相分离</span><br><span class="line">&lt;div class=“container simpleExt”&gt;&lt;/div&gt;   //html 结构</span><br><span class="line">.container &#123;……&#125;    //控制结构的class</span><br><span class="line">.simpleExt&#123;……&#125;      //控制皮肤的class</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码示例：//容器和内容相分离。</span><br><span class="line">&lt;div class=“container”&gt;&lt;ul&gt;&lt;li&gt;排行&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;   //html 结构</span><br><span class="line">.container ul&#123;……&#125;    //ul依赖了容器</span><br><span class="line">&lt;div class=“container”&gt;&lt;ul class=“rankList ”&gt;&lt;li&gt;排行&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;   </span><br><span class="line">.rankList&#123;……&#125;    //解除与容器的依赖，可以从一个容器转移到其他容器</span><br></pre></td></tr></table></figure><h3 id="OOCSS官网以及常用CSS库"><a href="#OOCSS官网以及常用CSS库" class="headerlink" title="OOCSS官网以及常用CSS库"></a>OOCSS官网以及常用CSS库</h3><ul><li>oocss.org //官网</li><li>reset.css</li><li>normalize.css</li><li>Neat.css</li></ul>]]></content>
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOCSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>限制input智能输入数字且限制只能输入两位小数</title>
      <link href="/2018/07/14/js_jquery_skill/index/"/>
      <url>/2018/07/14/js_jquery_skill/index/</url>
      <content type="html"><![CDATA[<blockquote><p> chrome中的input不要加type=”number”,有问题,输入负号截取到第一个字符串是空，就默认text就行,若允许负数加上allowMinus类，正数只加limitNumber </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'keyup'</span>, <span class="string">'.limitNumber,.allowMinus'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//修复第一个字符是小数点 的情况. </span></span><br><span class="line">  <span class="keyword">let</span> fa = <span class="string">''</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.classList.contains(<span class="string">'allowMinus'</span>)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value.substring(<span class="number">0</span>, <span class="number">1</span>) === <span class="string">'-'</span> &amp;&amp; (fa = <span class="string">'-'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.value !== <span class="string">''</span> &amp;&amp; <span class="keyword">this</span>.value.substr(<span class="number">0</span>, <span class="number">1</span>) === <span class="string">'.'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="keyword">this</span>.value.replace(<span class="regexp">/^0*(0\.|[1-9])/</span>, <span class="string">'$1'</span>);<span class="comment">//解决 粘贴不生效</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="keyword">this</span>.value.replace(<span class="regexp">/[^\d.]/g</span>, <span class="string">""</span>);  <span class="comment">//清除“数字”和“.”以外的字符</span></span><br><span class="line">  <span class="keyword">this</span>.value = <span class="keyword">this</span>.value.replace(<span class="regexp">/\.&#123;2,&#125;/g</span>, <span class="string">"."</span>); <span class="comment">//只保留第一个. 清除多余的</span></span><br><span class="line">  <span class="keyword">this</span>.value = <span class="keyword">this</span>.value.replace(<span class="string">"."</span>, <span class="string">"$#$"</span>).replace(<span class="regexp">/\./g</span>, <span class="string">""</span>).replace(<span class="string">"$#$"</span>, <span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="keyword">this</span>.value.replace(<span class="regexp">/^(\-)*(\d+)\.(\d\d).*$/</span>, <span class="string">'$1$2.$3'</span>);<span class="comment">//只能输入两个小数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.value.indexOf(<span class="string">"."</span>) &lt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.value !== <span class="string">""</span>) &#123;<span class="comment">//以上已经过滤，此处控制的是如果没有小数点，首位不能为类似于 01、02的金额</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.value.substr(<span class="number">0</span>, <span class="number">1</span>) === <span class="string">'0'</span> &amp;&amp; <span class="keyword">this</span>.value.length === <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.value = <span class="keyword">this</span>.value.substr(<span class="number">1</span>, <span class="keyword">this</span>.value.length);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.value = fa + <span class="keyword">this</span>.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>方法二：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'keydown'</span>, <span class="string">'.limitNumber,.allowMinus'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//8 = backspace;45=insert;46=delete;189 = '-';110小键盘.</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.classList.contains(<span class="string">'allowMinus'</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(e.keyCode === <span class="number">189</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (e.keyCode !== <span class="number">110</span> &amp;&amp; e.keyCode !== <span class="number">190</span> &amp;&amp; e.keyCode !== <span class="number">8</span> &amp;&amp; e.keyCode !== <span class="number">46</span> &amp;&amp; e.keyCode !== <span class="number">45</span> &amp;&amp; (e.keyCode &lt; <span class="number">48</span></span><br><span class="line">        || (e.keyCode &gt; <span class="number">57</span> &amp;&amp; e.keyCode &lt; <span class="number">96</span>) || e.keyCode &gt; <span class="number">110</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">    .on(<span class="string">'keyup'</span>, <span class="string">'.limitNumber'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> fa = <span class="string">''</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.classList.contains(<span class="string">'allowMinus'</span>))&#123;</span><br><span class="line">        <span class="keyword">this</span>.value.substring(<span class="number">0</span>, <span class="number">1</span>) === <span class="string">'-'</span> &amp;&amp; (fa = <span class="string">'-'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.value = <span class="keyword">this</span>.value.replace(<span class="regexp">/[^\x00-\x80]/gi</span>, <span class="string">''</span>)</span><br><span class="line">      <span class="comment">//[^0-9.] 匹配不是数字和小数点的字符</span></span><br><span class="line">      <span class="comment">//[.][0-9]*[.] 匹配第一个小数点之后的数字，若多写小数点则归位到第一个小数点位置</span></span><br><span class="line">      <span class="keyword">let</span> str = (<span class="keyword">this</span>.value.replace(<span class="regexp">/[^0-9.]/g</span>, <span class="string">''</span>)).replace(<span class="regexp">/.][0-9]*[.]/</span>, <span class="string">'.'</span>).replace(<span class="regexp">/^(\-)*(\d+)\.(\d\d).*$/</span>,<span class="string">'$1$2.$3'</span>)</span><br><span class="line">      str.substring(<span class="number">0</span>, <span class="number">1</span>) === <span class="string">'.'</span> &amp;&amp; (str = <span class="string">'0'</span> + str)</span><br><span class="line">      <span class="keyword">this</span>.value = fa + str</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>有什么好的办法记得评论哟！</strong></p></blockquote>]]></content>
      
      <categories>
          
          <category> jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> jquery </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/07/13/hello-world/"/>
      <url>/2018/07/13/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
